The Drone Deploy web app gives the users drone data and detailed information through queries. The AI generated data access OpenAI through and API call using Node.js and displays the information on a clean UI using React and Tailwind CSS.

Frontend tech stack: Utilized Tailwind CSS and react to create a modern approach to handeling user queries 
Backend tech stack: Utilized Node.js and Express.js to integrate with OpenAI to handle user queries. 

1. Create Directories for backend and frontend and navigate to the backend (cd backend)
2. Start the Node.js and ensure the packages for OpenAI are installed, and create OpenAI key. (Downgrade the openAI to a stable version.)
3. Create the server using Express (The app returned by express() is in fact a JavaScript Function, DESIGNED TO BE PASSED to Nodeâ€™s HTTP servers as a callback to handle requests.)
4. Test the server with Postman

Frontend 
1. Install the packages for tailwind, typescript, create the directories, and create the components for the header and the cards in the body.
2. Create an env file in the root directory.
3. Start the development server

Components
1. QueryInterface - create a text input for questions, add button, integrate with API with token usage tracking, add example queries.
2. Header - Create a navigation bar with responsive design and mobile menu, add a logo, use tailwind colors.

Test
1. Run the Environment
2. Enter a question about YNP drone data in the input field
3. Click "Ask Question" 
4. View the AI-generated response
5. Click example queries and view results

